<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on devlags | Tomasz Zubertowski</title>
    <link>http://tzubertowski.github.io/post/index.xml</link>
    <description>Recent content in Posts on devlags | Tomasz Zubertowski</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <copyright>All rights somethingsomething opensource, yay!</copyright>
    <lastBuildDate>Tue, 27 Dec 2016 12:28:08 +0100</lastBuildDate>
    <atom:link href="http://tzubertowski.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hackaton - internal or external, a great thing to do regardless</title>
      <link>http://tzubertowski.github.io/post/hackathon-benefits/</link>
      <pubDate>Tue, 27 Dec 2016 12:28:08 +0100</pubDate>
      
      <guid>http://tzubertowski.github.io/post/hackathon-benefits/</guid>
      <description>

&lt;h3 id=&#34;1-what-s-a-hackathon&#34;&gt;1. What&amp;rsquo;s a hackathon&lt;/h3&gt;

&lt;p&gt;Hackathon&amp;rsquo;s meaning is partially incuded in it&amp;rsquo;s name, hack + marathon, marathon of &amp;ldquo;hacking&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s an event where large ammounts of developers/IT/design/management/etc experts meet together to work on a projects with the goal of finishing it in planned hackathon lenght (usually 24-72hrs). Those projects tend to have a theme selected by hackathon organizers, however the exact project ideas come from participants.&lt;/p&gt;

&lt;h4 id=&#34;is-it-like-even-popular&#34;&gt;Is it, like, even popular?&lt;/h4&gt;

&lt;p&gt;Yes it is. There is a ton of developers willing to code for fun, there is also a ton of people willing to help organize such events.
The whole idea behind those kind of events is simple, but they are made different and interesting through theme and the location. Check out a few of interesting ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hackatrain.nl/&#34;&gt;http://hackatrain.nl/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/hackathon/&#34;&gt;https://www.facebook.com/hackathon/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackjunction.com/&#34;&gt;https://hackjunction.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I assure you that most of those had open tickets that were gone in matter of days.&lt;/p&gt;

&lt;h3 id=&#34;2-external-open-hackathons&#34;&gt;2. External/open hackathons&lt;/h3&gt;

&lt;p&gt;Those are the most common ones. External - as in available for anyone interested in participating.&lt;/p&gt;

&lt;h5 id=&#34;what-s-in-for-the-organizers&#34;&gt;What&amp;rsquo;s in for the organizers?&lt;/h5&gt;

&lt;p&gt;Organizing one seems like a lot of work, right? Food, drinks, theme, place to stay, hardware (screen/desks). Why would anyone bother with making one?
Well for one you have a large group of IT people who obviously can develop solutions seeing what insane projects are sometimes finished in merely 24-72hrs. IT is still haunted by specialist shortages. Interviewing takes a lot of time both due to the quality of candidates and broken recruitment processess.&lt;/p&gt;

&lt;p&gt;Hackathon by it&amp;rsquo;s nature of working for fun is a &lt;em&gt;fantastic&lt;/em&gt; place to fish out experts who enjoy their work for what it is - after all they spend their free time coding stuff that will most likely not bring them any material gain. Those events also tend to aggregate experienced people who can actually build stuff.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s not just developers or IT in general. Great designers, managers, content writers enjoy hakcathons as well!&lt;/p&gt;

&lt;h5 id=&#34;what-s-in-for-participants&#34;&gt;What&amp;rsquo;s in for participants?&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Fun&lt;/strong&gt; is the first one. Sometimes you have finished your personal project some time ago and cannot find idea or motivation to start a new one, or you feel a bit burned out by your day to day work. I bet you already forgot how much fun it is to build barely working prototype :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Experience gain&lt;/strong&gt; is a nice addition too. You work with other experts on a project after all.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Space for experiment&lt;/strong&gt;. Perhaps you are a backend developer that heard about how great React.js is, or you are a frontend developer wanting to check out how nodejs/closure/placeholder_here. Hackathons are there to help you experiment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Career growth opportunity&lt;/strong&gt;. That is an extension of previous paragraph. Companies are looking for experts, experts are often looking for new opportunities.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;3-internal-company-wide-hackathons&#34;&gt;3. Internal (company-wide) hackathons&lt;/h3&gt;

&lt;p&gt;Those are the ones that are rare and simultaneously the ones that bring the most benefit.&lt;/p&gt;

&lt;p&gt;Here at &lt;a href=&#34;http://lifeworks.com&#34;&gt;LifeWorks&lt;/a&gt; we have organized one just before december. Although it was reserved only for the employees I do believe it has been an eye-opening event for management and a fun one for participants.&lt;/p&gt;

&lt;h5 id=&#34;what-s-in-for-the-company&#34;&gt;What&amp;rsquo;s in for the company?&lt;/h5&gt;

&lt;h6 id=&#34;recruitment&#34;&gt;Recruitment&lt;/h6&gt;

&lt;p&gt;The same benefit as external hackathons applies here only if the event is open for both internal and external participants.&lt;/p&gt;

&lt;p&gt;It is however slightly different. Hackathons that are aggregating both internal and external participants are a great way of recruiting as well. Subconsciously employees are working together with people from the outside. Such work often results in a great cooperation and a great hackathon project. This way companies are able to effortlessly &lt;em&gt;interview&lt;/em&gt; and &lt;em&gt;test out&lt;/em&gt; how potential candidates fit into the teams they have built.&lt;/p&gt;

&lt;h6 id=&#34;product-enhancement&#34;&gt;Product enhancement&lt;/h6&gt;

&lt;p&gt;Employees are the ones that see, use and work on given product the most. They are often the ones who try to improve it during their work time, it is not rare however (especially in startup community) for them not to have an opportunity to do so. Tight schedules, hotfixes needed on production right now, weak management and planning often make it impossible. Hackathons however are the time when people can sit down and build/enhance something they always wanted to do.&lt;/p&gt;

&lt;p&gt;Upper management may be surprised how much can be done in so little time when everyone is motivated and unmanaged. Of course such projects if choosen to be product features have to go through normal release process, however the time will be decreased as there is already a prototype working.&lt;/p&gt;

&lt;p&gt;Sadly this benefit only applies to internal, closed hackathons for employees only. Exception to this are opensource companies of course.&lt;/p&gt;

&lt;h6 id=&#34;employee-motivation-boost&#34;&gt;Employee motivation boost&lt;/h6&gt;

&lt;p&gt;Hackathons participants are prone to motivation boost : )&lt;/p&gt;

&lt;p&gt;You have very limited ammount of time, yet you manage to build something that works, coul be reused and was a lot of fun to build. That sure makes anyone want to go to work the next day.&lt;/p&gt;

&lt;h6 id=&#34;benefits-company-image&#34;&gt;Benefits company image&lt;/h6&gt;

&lt;p&gt;If it&amp;rsquo;s internal - it&amp;rsquo;s directly for the employees. Company that was able to sacrifice a bit of budget and time (as it&amp;rsquo;s only fair, considering the benefits, for hackathon to start on a working day) to allow them to have some fun with projects they wanted to do. Sick!&lt;/p&gt;

&lt;p&gt;If it&amp;rsquo;s a hackathon for external participants as well it&amp;rsquo;s even better. Words spread easilly, what developer would possibly dislike a company that &lt;em&gt;feels&lt;/em&gt; it?&lt;/p&gt;

&lt;h4 id=&#34;what-s-in-for-the-employees-participants&#34;&gt;What&amp;rsquo;s in for the employees/participants?&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Same things apply as for external hackathons. In addition to that you have the opportunity to work and bond with your coworkers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opensource opportunity&lt;/strong&gt;. Hackathon is a great way to open the doors for opensource in your company. Since you spend all this time benefiting just the company, why not release all this stuff for others to use?&lt;/li&gt;
&lt;li&gt;Chance to win. A bit of healthy competition is a great boost for many. Even if you don&amp;rsquo;t like it, you still have a chance to win a prize for your hard work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Not to mention the beers.&lt;/p&gt;

&lt;h3 id=&#34;4-conclusion&#34;&gt;4. Conclusion&lt;/h3&gt;

&lt;p&gt;Hackathons aren&amp;rsquo;t new, they have been there in one way or another since the geeks decided to create communities. Often ignored or considered as useless they are not only great fun but also beneficial for any party participating.&lt;/p&gt;

&lt;p&gt;I can only suggest you to try one yourself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sunday sermon #2 - help your project, use CI &amp; automation</title>
      <link>http://tzubertowski.github.io/post/ci-wont-save-you/</link>
      <pubDate>Wed, 14 Sep 2016 12:28:08 +0100</pubDate>
      
      <guid>http://tzubertowski.github.io/post/ci-wont-save-you/</guid>
      <description>

&lt;h3 id=&#34;1-what-s-ci&#34;&gt;1. What&amp;rsquo;s CI&lt;/h3&gt;

&lt;p&gt;CI stand for continous integration. The simplest way I could explain what it really is is with an example.&lt;/p&gt;

&lt;p&gt;Say, you remember when you started your first coding related job, or maybe the second. Hopefully the company/environment provided you with opportunity to review code throughout the team. If so you may have noticed that often it is not the solution itself that takes the most time but the actual codereviews, discussions and merging that is the problem.&lt;/p&gt;

&lt;p&gt;Now you may have been unlucky and had the unpleasant opportunity of deploying straight to staging/production in versioning approach [simply deploying with version only].&lt;/p&gt;

&lt;p&gt;That often means that your code gets merged and integrated not after it was reviewed BUT during the deployment process. A few days taken out of the team life just to fix broken tests, conflicts, bad merges and other hidden problems. Not to mention that the actual deployment usually takes a lot of time as well: executing migrations, updating codebase, regenerating caches/static content.&lt;/p&gt;

&lt;p&gt;Now the idea of CI is that those submitted changes once reviewed/documented/whatever is in the process get merged and integrated into the code base.&lt;/p&gt;

&lt;h3 id=&#34;2-automation&#34;&gt;2 Automation&lt;/h3&gt;

&lt;p&gt;Once you start implementing CI to your project the automation part comes as a natural step.&lt;/p&gt;

&lt;h5 id=&#34;2-1-deployment-build-automation&#34;&gt;2.1 Deployment/build automation&lt;/h5&gt;

&lt;p&gt;Assuming that you guys still deploy manually you sure know how long it takes. Starting from executing migrations on the DB, updating indexes, the codebase itself, regenerating caches/static content. All of those take a lot of time, yet they don&amp;rsquo;t have to.&lt;/p&gt;

&lt;p&gt;All of those steps are simple enough to automate them. Since if any of the step fails you usually rollback anyway - so should the automated part. Follow steps, prepare environment, deploy. If any steps fail - do not dpeloy.&lt;/p&gt;

&lt;p&gt;Protip: Those automation steps should be external to your CI solution, eg. CI shouldn&amp;rsquo;t contain the scripts themselves but only execute them.&lt;/p&gt;

&lt;h5 id=&#34;2-2-test-execution-automation&#34;&gt;2.2 Test execution automation&lt;/h5&gt;

&lt;p&gt;If you are no writing any tests - change either your work quality or the work itself. Benefits are outrageous, but even if you do write them test execution is problematic. From the integration point of view  - tests tell you how well your changes integrated into the existing code.&lt;/p&gt;

&lt;p&gt;This makes them valuable to execute on each codebase change made. Without any automation it is quite problematic since tests are ran on your own project and your project have it&amp;rsquo;s own dependencies. But this is why we automated the environment setup in 2.1. If you have it automated - the tests execution is childplay.&lt;/p&gt;

&lt;p&gt;Build the environment, deploy, execute tests and provide testsuite results to interested parties (eg. code reviewers).&lt;/p&gt;

&lt;h4 id=&#34;3-deployment-methodology-change&#34;&gt;3 Deployment methodology change&lt;/h4&gt;

&lt;p&gt;You have just read about quality assurance through test writing and execution per submitted change. At the beginning of this short post you have also read about deployment methodologies. There are many, I have mentioned versioning deployments.&lt;/p&gt;

&lt;p&gt;Well, since you have went a long way from having to do everything yourself, perhaps enhancing your code quality through tests, integrating the automation in your software development process. At this point you may notice that: if change is tested, does not bring any integration issues and has been reviewed by the team - why wait with the merging?&lt;/p&gt;

&lt;p&gt;Aand you have just created a great environment to use the CI with. If you did like the idea - google up continuous development &amp;amp; delivery. Have fun! : )&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Senior developer – why can&#39;t you land a job with me </title>
      <link>http://tzubertowski.github.io/post/senior-developer-interview/</link>
      <pubDate>Wed, 14 Sep 2016 11:28:08 +0100</pubDate>
      
      <guid>http://tzubertowski.github.io/post/senior-developer-interview/</guid>
      <description>

&lt;h3 id=&#34;foreword&#34;&gt;Foreword&lt;/h3&gt;

&lt;p&gt;I may not be the most experienced developer who takes care of recruitment process. At the same time the experience I have gained so far makes me a good source of information about conducting and attending  interviews. Please, keep in mind that this article is written from the perspective of developer and &lt;strong&gt;not&lt;/strong&gt; a recruiter before reading any further.&lt;/p&gt;

&lt;p&gt;Note: I didn&amp;rsquo;t want to bring any specific programming language to this post as I strongly believe what I am going to talk about applies to all of the languages.&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Looking for a job? I don&amp;rsquo;t even have to imagine how many offers do you actually receive per week as a developer. I am one as well, you know. Well, company loyalty is something I would like to save for another post and you have your own reasons for the job hunt anyway.
Since you are reading this there is good chance you are a senior developer. I assume you have already submitted your CV to some of the offers. Perhaps you have even been interviewed already and received a response - a negative one.&lt;/p&gt;

&lt;p&gt;How comes, even though you have been always successful and landed any job so far - it is now that you receive refusals?&lt;/p&gt;

&lt;h4 id=&#34;1-your-expectations&#34;&gt;1. Your expectations&lt;/h4&gt;

&lt;p&gt;You are not applying for a junior nor mid positions anymore. You have enough experience to consider yourself a senior. It is only natural that you expect the interview to be conducted with consideration to your experience and skill. Perhaps you cannot wait to shine with your knowledge about all those curiosities you happened to learn over the years. Maybe even hoping for a moment to discuss and confront your views on a given subject during the interview.
And this is fine. It is usually the case that interviews are prepared with that in mind. But if your expectations are anywhere near what I mentioned– be assured, they are not even close to your interviewer expectations.&lt;/p&gt;

&lt;h4 id=&#34;2-interviewer-expectations&#34;&gt;2. Interviewer expectations&lt;/h4&gt;

&lt;p&gt;While it is fairly easy to &lt;em&gt;screen&lt;/em&gt; someone out and proceed with the proper interview it is the &lt;em&gt;screening&lt;/em&gt; part that often leaves the biggest impression.&lt;/p&gt;

&lt;p&gt;The thing you need to know is that&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;in my opinion difference between a junior and a mid developer is nothing to compare between mid and senior&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I ask you a question and do not explicitly specify that I want a general idea you are safe to assume I am looking for an answer which levels with the position you have applied for.&lt;/p&gt;

&lt;p&gt;I usually tend to give a subtle push towards this by continuing to ask about details, even for the simplest of questions, when the answer was insufficient. &lt;em&gt;However it is when I usually receive no constructive answer&lt;/em&gt;. I am not here to judge as to why, but you need to be aware I expect an answer which a senior developer could give and am not looking for a junior or even mid level.&lt;/p&gt;

&lt;p&gt;And as to the &lt;em&gt;advanced&lt;/em&gt; questions – they are &lt;em&gt;the cherry on the cake&lt;/em&gt;. If the cake itself is not tasty no cherry will make a difference. At the same time it is the cherry that makes the cake complete. What I mean to say by that is simple – know your basics. Be prepared to answer the questions as a senior and then I will gladly proceed with the more ambitious questions.&lt;/p&gt;

&lt;h4 id=&#34;3-misconception-about-interview-purpose&#34;&gt;3. Misconception about interview purpose&lt;/h4&gt;

&lt;p&gt;Sadly it is a very common thing. Interviews are held for one single purpose. &lt;strong&gt;To check the candidates compatibility with the position&lt;/strong&gt;. Meaning no less than – they are here for the employer.&lt;/p&gt;

&lt;p&gt;I like ambition and I do not mind holding a discussion during my interviews. Same thing about answering questions that candidate failed to answer yet seeks the solution. I will be there for you as long as it does not interfere with the reason I have mentioned.&lt;/p&gt;

&lt;p&gt;It may be harsh but: interview is held for the sake of the employer. Keep that in mind.&lt;/p&gt;

&lt;h4 id=&#34;4-lack-of-preparation-from-either-of-sides&#34;&gt;4. Lack of preparation from either of sides&lt;/h4&gt;

&lt;p&gt;I try to reserve an hour before each interview to prepare myself. To know my candidate profile and arrange the interview to fulfil #2 and #3 goals. However I am still a person, a developer in fact. There are times when I am only able to spare 20 or 30 minutes. Even though I have a set of guidelines to follow it may affect the way the interview will go. But don&amp;rsquo;t worry, it will not affect the outcome.&lt;/p&gt;

&lt;p&gt;However there are things that are under your control is your own preparation. When you are asked to come for the interview, asked to bring your laptop and notified that there is going to be technical part it is for your best interest to prepare for that or &lt;strong&gt;simply decline&lt;/strong&gt;. I have no problems with sharing my laptop with you if there is a reason you couldn&amp;rsquo;t bring yours. I do not really like the idea of &lt;em&gt;livecoding&lt;/em&gt; during interviews so I will allow you to choose either writing down/explaining an algorithm, mocking up pseudocode or simply picking a language of your choice to write the solution written in.
Still if during that part you are surprised, unprepared or unwilling to go with the technical part, well, the outcome of the interview is quite easy to predict.&lt;/p&gt;

&lt;p&gt;Note: also keep in mind that technical interviews should be, and usually are, graded respecting the circumstances (stress does it&amp;rsquo;s own thing).&lt;/p&gt;

&lt;h4 id=&#34;5-inconsistent-cv&#34;&gt;5. Inconsistent CV&lt;/h4&gt;

&lt;p&gt;No matter what amount of information your CV contains please do not contradict yourself. Keep your CV updated and do not allow mistakes such as:&lt;br /&gt;
&amp;gt; I have 11 years of experience as a developer&amp;hellip; followed by.. And around 7 years in IT overall.
Such mistakes make you look less reliable (and perhaps this is not just an expression).&lt;/p&gt;

&lt;p&gt;At the same time make sure you mention your knowledge level toskills/technologies you have put there. If you list 20 technologies used in one project I will pick one of them and verify that you indeed have used it.&lt;/p&gt;

&lt;h3 id=&#34;afterword&#34;&gt;Afterword&lt;/h3&gt;

&lt;p&gt;Well it looks like I shared my secrets with you, just be sure to take them with a pinch of salt. All I did was that I simply pointed out things you could find out yourself as an interviewee. They are more or less obvious. Some of them may even seem outrageous but I would rather make you aware of those than let you keep repeating your mistakes.
Perhaps when you land the job you wanted you will write me nice comment? Or maybe you have already landed it and have something to share? Whatever it may be – just leave me a comment.&lt;/p&gt;

&lt;p&gt;Cheers,
Tomasz&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sunday sermon #1 - QA, goalkeeper of every developer</title>
      <link>http://tzubertowski.github.io/post/qa-the-goalkeeper/</link>
      <pubDate>Sun, 03 Jul 2016 21:28:08 +0100</pubDate>
      
      <guid>http://tzubertowski.github.io/post/qa-the-goalkeeper/</guid>
      <description>

&lt;h3 id=&#34;wait-what&#34;&gt;Wait, what?&lt;/h3&gt;

&lt;p&gt;Yeah, your goalkeeper. Surprised? If you are a developer there&amp;rsquo;s a great chance that you are underestimating the role of QA in development process. The less experience you have the more the chance is. But hey, that&amp;rsquo;s natural you know.&lt;/p&gt;

&lt;p&gt;You will grow to love them on your first major, ekhm, bug on production.&lt;/p&gt;

&lt;h3 id=&#34;bugs-on-production-never-happen-to-me&#34;&gt;Bugs on production never happen to me!&lt;/h3&gt;

&lt;p&gt;Maybe, or perhaps you just ignore the pingpong you usually play with your QA tester. Acceptance criteria not fulfilled? Meh. Bugfix still not resolving the issue? Pfft, what do they know. Hard copy change? Ah come on man, that&amp;rsquo;s &lt;em&gt;just&lt;/em&gt; one word off.&lt;/p&gt;

&lt;p&gt;Every time your QA dared to make you sit down and amend the mistakes - they saved one bug on production. Not you, them.&lt;/p&gt;

&lt;h3 id=&#34;okay-i-may-have-had-one-or-two-bugs-but-hey-it-s-qa-not-catching-them&#34;&gt;Okay, I may have had one or two bugs. But hey - it&amp;rsquo;s QA not catching them&lt;/h3&gt;

&lt;p&gt;Come on. That&amp;rsquo;s low. It was you in the first place who introduced the bug. A moment ago you were close to completely disregarding QA work, now you try to blame them for letting a bug go through the testing.&lt;/p&gt;

&lt;p&gt;Sure, it would be nice to fix the issue before it getting to production but man - it happens everywhere, regardless of development process.&lt;/p&gt;

&lt;h3 id=&#34;b-but-such-minor-quality-issues-shouldn-t-be-considered-bugs&#34;&gt;B-but such minor quality issues shouldn&amp;rsquo;t be considered bugs&lt;/h3&gt;

&lt;p&gt;Oh but they definitely should. Every single issue released to production is potentially harmful to the company you are working at. I do know you are &lt;em&gt;but a mere developer&lt;/em&gt; but hey, it is going to be you talking with your manager next time QA fails to catch something.&lt;/p&gt;

&lt;p&gt;After all the clients whom pay your company pay your salary as well as your manager&amp;rsquo;s.&lt;/p&gt;

&lt;h3 id=&#34;all-they-do-is-writing-automation-tests-i-could-do-it-myself&#34;&gt;All they do is writing automation tests, I could do it myself&lt;/h3&gt;

&lt;p&gt;Sure you could, you are a developer after all. And by such you tend to write things as you understand them. Automation testers however write them as per business requirement totally ignoring the idea you came up yourself. Often mismatching what you have developed and, again, defending the goal.&lt;/p&gt;

&lt;p&gt;This point however could be indeed true if you yourself began writing behavioral tests. But hey, I bet that&amp;rsquo;s boring.&lt;/p&gt;

&lt;h3 id=&#34;so-what-should-i-do-to-not-mess-with-qa-then&#34;&gt;So what should I do to not mess with QA then?&lt;/h3&gt;

&lt;p&gt;Just don&amp;rsquo;t be egocentric, that&amp;rsquo;s all. If you are not a junior it&amp;rsquo;s going to be way easier for you since you should already know that - don&amp;rsquo;t take everything personally.&lt;/p&gt;

&lt;p&gt;You guys both work for the same goal, don&amp;rsquo;t forget that.&lt;/p&gt;

&lt;h5 id=&#34;afterword&#34;&gt;Afterword&lt;/h5&gt;

&lt;p&gt;Turns out it&amp;rsquo;s a lot of fun to write short, clickbaiting (sorry, but not really) posts like that. I will try to keep them as series - &lt;em&gt;sunday sermon&lt;/em&gt; seemed to fit as the name like nothing else.&lt;/p&gt;

&lt;p&gt;If you do like this form of writing - let me know in the comments. Hell, even if you don&amp;rsquo;t just let me know.&lt;/p&gt;

&lt;p&gt;Cheers,
Tomasz&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning how to code: common mistakes</title>
      <link>http://tzubertowski.github.io/post/learning-to-code-mistakes/</link>
      <pubDate>Fri, 15 Apr 2016 07:10:08 +0100</pubDate>
      
      <guid>http://tzubertowski.github.io/post/learning-to-code-mistakes/</guid>
      <description>

&lt;h3 id=&#34;backstory&#34;&gt;Backstory&lt;/h3&gt;

&lt;p&gt;I, like many other developers, started my adventure with programming without any good reason. Some of us started early while some of us started late in our lives. At the same time nearly all started out simply because &amp;ldquo;it seemed like a fun thing to do&amp;rdquo;. Just like that - &amp;ldquo;it was fun to do so I did it&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I was lucky enough to own a really low-budget PC as a kid. I was just 14 years old, when all of my friends were playing quake 3 and I was stuck with DOS or 2D games. Thanks to that I quickly stumbled upon my first programming language – visualbasic. And man, I have probably spent more time helping with an open-source online MUD (multiplayer user dungeon) project than I have ever spent on my engineering diploma. Kids are kids, school is school and - we became flooded with MMO games. Due to that my interest in programming died.&lt;/p&gt;

&lt;p&gt;It wasn&amp;rsquo;t until when I was 20 that I have became interested in programming again. In the next following two years I advanced from an intern into a mid position programmer.&lt;/p&gt;

&lt;p&gt;How comes it only took me two years? Why do other people struggle with learning how to code? I will try to answer those questions by listing the most common mistakes people do while learning how to code.&lt;/p&gt;

&lt;h2 id=&#34;1-lack-of-just-in-time-learning&#34;&gt;1. Lack of Just-in-time learning&lt;/h2&gt;

&lt;p&gt;What is just-in-time learning? Exactly what it says it is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will &lt;strong&gt;ever only need to learn anything when you need it to fulfill your goal&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do you know what will people tell you when you ask them &lt;em&gt;&amp;ldquo;where should I start learning how to code&amp;rdquo;&lt;/em&gt;? &lt;em&gt;&amp;ldquo;Go read the C symfony book&amp;rdquo;&lt;/em&gt;. And yeah, I tried that too as a junior. In terms of books – it is one of the best manuals for a given language, syntax and usages that I have ever read. &lt;strong&gt;But reading books when all you want to do is learn how to code is insanely unoptimized&lt;/strong&gt;. Do not read a 500 pages long book about &lt;em&gt;best practices with database handling in your code&lt;/em&gt; before you even start using a database in it. First learn by using it, then read anything that will make you better with it - as long as it brings you closer to your goal.&lt;/p&gt;

&lt;p&gt;Same goes for tutorials. I am not saying experimenting is bad but no matter how interesting going through 10 randomly picked tutorials may seem to be, the ending result is often &lt;em&gt;a random source code you have copypasted from a tutorial just to see how it works&lt;/em&gt;. This knowledge will be, at best, temporary. When a project will make you use one of the technologies/solutions that you have once seen in a tutorial, well, you will simply google it again and then perhaps learn it by experience.
Reading unrelated materials will take your time and energy which you may have spent on constructive learning.&lt;/p&gt;

&lt;p&gt;Then why do people defend learning from books, going from page one to page six hundred, in order to learn how to write a calculator in PHP? In most cases they are motivated by getting &lt;em&gt;&amp;ldquo;advanced understanding of a given subject&amp;rdquo;&lt;/em&gt;. Why would you need that when you are just starting out? Well, the answer you will receive from them will be similar to &lt;em&gt;&amp;ldquo;would you like to use something without understanding it?&amp;rdquo;&lt;/em&gt;. The truth is  – for a lot of them it&amp;rsquo;s just fear of not being able to answer a question. Be it at the interview or during their actual work. But why should you care? You want to be a developer, not an encyclopedia. In your everyday life you use things you do not understand and it is not expected of you to understand them fully. Mobile phones, laptops, even cars sometimes. Same thing applies to programming. No one sane will ever expect you to know everything about android development just because you are an android developer.&lt;/p&gt;

&lt;h2 id=&#34;2-learning-without-a-goal&#34;&gt;2. Learning without a goal&lt;/h2&gt;

&lt;p&gt;Even if it is your day 1 of programming. Set a goal: &lt;em&gt;&amp;ldquo;I want to build a calculator&amp;rdquo;&lt;/em&gt;. Make a goal of creating an application which does &lt;em&gt;a&lt;/em&gt;, by doing &lt;em&gt;b&lt;/em&gt;, so you get &lt;em&gt;c&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Why do you need that? It will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimize amount of clueless wandering mentioned in #1&lt;/li&gt;
&lt;li&gt;It will, by nature, make you learn things you need to know in order to be able to build it&lt;/li&gt;
&lt;li&gt;At the end of this project you will be left with something you made yourself and something you can show to someone in case of need&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But how do you exactly start? Let&amp;rsquo;s say you have picked a project, you want to create a &lt;em&gt;countdown clock&lt;/em&gt;. Here are a few steps you could take in order to accomplish this task:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You need to show a window when the clock will be displayed. &lt;strong&gt;Search how to display an empty window&lt;/strong&gt; in your chosen language.&lt;/li&gt;
&lt;li&gt;You need to have a field which will say &amp;ldquo;how many minutes should I countdown for&amp;rdquo;. &lt;strong&gt;Search how to add a field to input data into&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You need to have a button &lt;em&gt;start counting down&lt;/em&gt;. &lt;strong&gt;Search how to create a button&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You need to make something happen when you click the button. &lt;strong&gt;Search how to make something happen when you click on the button&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You need to make a timer with set amount of minutes. &lt;strong&gt;Search how to create a timer&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;….&lt;/p&gt;

&lt;p&gt;99 . Finish and release your application.&lt;/p&gt;

&lt;p&gt;I hope you get what I mean. Setting a goal and slowly breaking it down will not only keep your development flow but will keep you focused on the goal as well.&lt;/p&gt;

&lt;h2 id=&#34;3-mr-perfect&#34;&gt;3. Mr. Perfect&lt;/h2&gt;

&lt;p&gt;This is a case very commonly seen in the junior level developers. I have already touched this subject in the #1 argument. Spending tons and tons of time just to make something perfect. Indefinitely updating, refactoring, changing the code. Finding better solutions, going through tutorials and books.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Just stop it&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A finished project is always better than a good mockup, just like done is always better than perfect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;4-spending-too-much-time-on-a-single-problem&#34;&gt;4. Spending too much time on a single problem&lt;/h2&gt;

&lt;p&gt;No. I do not mean it in the offensive way. But when your problem is big enough for you not to be able to solve it in 2-3 hours it means that spending 5 hours on it will, most likely, not help you solve it either.&lt;/p&gt;

&lt;p&gt;Just relax. Programming is an exhausting mental job. Every single programmer in the world has those kind of blocks sometimes.&lt;/p&gt;

&lt;h2 id=&#34;5-personal-attitude-towards-criticism&#34;&gt;5. Personal attitude towards criticism&lt;/h2&gt;

&lt;p&gt;There will be a time, perhaps soon, when you will have to show your code to someone. Not just the finished project. The source code.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t worked with another programmer before then, well, there is a good chance you will misinterpret criticism towards your code as a criticism towards yourself. No one ever means that. Even if they did their argument would be invalid as every programmer in the world writes barely acceptable code once in a while. You are just learning.
What matters is what you do with the feedback. No matter how irrelevant it can be – never ignore it no matter what. If someone found enough time to point it out you should take at least as much to verify and/or fix it.&lt;/p&gt;

&lt;h1 id=&#34;afterword&#34;&gt;Afterword&lt;/h1&gt;

&lt;p&gt;Thank you for going through this article with me. It was written based on my own experiences and will not apply to each and every situation. However my intention was to show you &lt;em&gt;guidelines&lt;/em&gt; to keep you on tract.&lt;/p&gt;

&lt;p&gt;Do you agree with me? Maybe disagree? Perhaps there is something I have missed? Be sure to drop a comment below. Much appreciated.&lt;/p&gt;

&lt;p&gt;Cheers,
Tomasz&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome Party</title>
      <link>http://tzubertowski.github.io/post/welcome-party/</link>
      <pubDate>Fri, 15 Apr 2016 07:10:08 +0100</pubDate>
      
      <guid>http://tzubertowski.github.io/post/welcome-party/</guid>
      <description>

&lt;h4 id=&#34;what-is-this-blog-about&#34;&gt;What is this blog about&lt;/h4&gt;

&lt;p&gt;About developer lags. There are moments in your programming life when you need to sit down, perhaps write something down before throwing yourself into coding again. I always called those the dev lags. A lot of the beneficial ones have already been lost, hopefully this blog will save the rest of them.&lt;/p&gt;

&lt;h4 id=&#34;what-can-you-expect&#34;&gt;What can you expect:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;tutorials, related to backend development, answers to less obvious programming questions&lt;/li&gt;
&lt;li&gt;felietons, articles from the viewpoint of a developer, touching non-technical aspect of the profession&lt;/li&gt;
&lt;li&gt;blogposts, my experiences from meetups, conferences, or simply articles which I wouldn&amp;rsquo;t call felietons&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>